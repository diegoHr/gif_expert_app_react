{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","helpers/apiKeys.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","categorie","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,EAAcE,GACdC,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,MAAQR,EACRS,SAjBc,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,a,QCLlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,6BCFC,oCDED,SAEAG,MAAOR,GAFP,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHhB,GAAKgB,EAAIhB,GACTC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QATtB,kBAaZY,GAbY,4CAAH,sDEEPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEtB,ECHwB,SAACA,GAEzB,MAA0BpB,mBAAS,CAC/B8B,OAAS,GACTG,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WACPjB,EAAQC,GAAUiB,MAAK,SAAAC,GACnBH,EAAS,CACLL,OAAQQ,EACRL,SAAS,SAGlB,CAACb,IAEGc,EDbmBK,CAAanB,GAAhCU,EAAP,EAAOA,OAAQG,EAAf,EAAeA,QAEf,OACI,qCACI,mCAAOb,EAAP,OAEA,sBAAKJ,UAAU,YAAf,UACKiB,GACG,mBAAGjB,UAAY,mCAAf,yBAIAc,EAAOF,KAAI,SAAAY,GAAK,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAM3B,cEhB1B4B,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAAe,gBAAiB,cAA9E,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAPH,SAAC4C,GACf5C,EAAc,CAAE4C,GAAH,mBAAiBD,QAO1B,uBAGA,6BAEIA,EAAWd,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAAwBA,SAAYA,GAAtBA,Y,MClBlCwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f2e812f8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories(inputValue)\n            setInputValue('')\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import { apiGiphy } from './apiKeys';\n\nexport const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiGiphy}`;\n    const resp = await fetch (url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id : img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        };\n    });\n        \n    return gifs\n}","export const apiGiphy = 'mo9aSNUVONTuGLTcCBIvBB5IxQtTlS9O';","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n    const {images, loading} = useFetchGifs(category);\n    \n    return (\n        <>\n            <h3> { category } </h3>\n\n            <div className=\"card-grid\">\n                {loading && \n                    <p className = \"animate__animated animate__flash\">\n                            Cargando...\n                    </p>}\n                {\n                    images.map(image => (\n                        <GifGridItem \n                            key={image.id} \n                            {...image}\n                        />\n                    ))\n                }\n                \n            </div> \n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        images : [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category).then(imgs => {\n            setstate({\n                images: imgs,\n                loading: false\n            });\n        });\n    }, [category])\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    \n    const [categories, setCategories] = useState([\"Dragon Ball\", \"One Punch Man\", \"Samurai X\"])\n\n    const handleAdd = (categorie) => {\n        setCategories( [categorie, ...categories])\n    }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories = { handleAdd }/>\n            <hr/>\n\n\n            <ol>\n            {\n                categories.map(category => (\n                    <GifGrid key={category} category= { category }/>\n                ))\n            }\n            </ol>\n            \n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}